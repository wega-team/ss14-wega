using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.FlavorText
{
    [GenerateTypedNameReferences]
    public sealed partial class FlavorText : Control
    {
        public Action<string>? OnFlavorTextChanged;
        // Corvax-Wega-Graphomancy-Extended-start
        public Action<string>? OnFlavorOOCTextChanged;
        public Action<string>? OnCharacterTextChanged;
        public Action<string>? OnGreenTextChanged;
        public Action<string>? OnYellowTextChanged;
        public Action<string>? OnRedTextChanged;
        public Action<string>? OnTagsTextChanged;
        public Action<string>? OnLinksTextChanged;
        public Action<string>? OnNSFWTextChanged;
        // Corvax-Wega-Graphomancy-Extended-end

        public FlavorText()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            var loc = IoCManager.Resolve<ILocalizationManager>();

            // Corvax-Wega-Graphomancy-Extended-Edit-start
            FlavorTabs.SetTabTitle(0, Loc.GetString("flavor-tab-flavor"));
            FlavorTabs.SetTabTitle(1, Loc.GetString("flavor-tab-character"));
            FlavorTabs.SetTabTitle(2, Loc.GetString("flavor-tab-ooc-flavor"));
            FlavorTabs.SetTabTitle(3, Loc.GetString("flavor-tab-gyr"));
            FlavorTabs.SetTabTitle(4, Loc.GetString("flavor-tab-nsfw"));
            FlavorTabs.SetTabTitle(5, Loc.GetString("flavor-tab-preview"));

            PreviewTabs.SetTabTitle(0, Loc.GetString("flavor-tab-flavor"));
            PreviewTabs.SetTabTitle(1, Loc.GetString("flavor-tab-character"));
            PreviewTabs.SetTabTitle(2, Loc.GetString("flavor-tab-gyr"));
            PreviewTabs.SetTabTitle(3, Loc.GetString("flavor-tab-nsfw"));

            CFlavorTextInput.Placeholder = new Rope.Leaf(loc.GetString("flavor-text-placeholder"));
            CFlavorTextInput.OnTextChanged += _ => FlavorTextChanged();

            CCharacterTextInput.Placeholder = new Rope.Leaf(loc.GetString("character-flavor-text-placeholder"));
            CCharacterTextInput.OnTextChanged += _ => CharacterTextChanged();

            CFlavorOOCTextInput.Placeholder = new Rope.Leaf(loc.GetString("ooc-flavor-text-placeholder"));
            CFlavorOOCTextInput.OnTextChanged += _ => FlavorOOCTextChanged();

            CTagsTextInput.Placeholder = new Rope.Leaf(loc.GetString("tags-flavor-text-placeholder"));
            CTagsTextInput.OnTextChanged += _ => TagsTextChanged();

            CLinksTextInput.Placeholder = new Rope.Leaf(loc.GetString("links-flavor-text-placeholder"));
            CLinksTextInput.OnTextChanged += _ => LinksTextChanged();

            CGreenTextInput.Placeholder = new Rope.Leaf(loc.GetString("green-flavor-text-placeholder"));
            CGreenTextInput.OnTextChanged += _ => GreenTextChanged();

            CYellowTextInput.Placeholder = new Rope.Leaf(loc.GetString("yellow-flavor-text-placeholder"));
            CYellowTextInput.OnTextChanged += _ => YellowTextChanged();

            CRedTextInput.Placeholder = new Rope.Leaf(loc.GetString("red-flavor-text-placeholder"));
            CRedTextInput.OnTextChanged += _ => RedTextChanged();

            CNSFWTextInput.Placeholder = new Rope.Leaf(loc.GetString("nsfw-flavor-text-placeholder"));
            CNSFWTextInput.OnTextChanged += _ => NSFWTextChanged();
            // Corvax-Wega-Graphomancy-Extended-Edit-end
        }

        public void FlavorTextChanged()
        {
            OnFlavorTextChanged?.Invoke(Rope.Collapse(CFlavorTextInput.TextRope).Trim());
        }

        // Corvax-Wega-Graphomancy-Extended-start
        public void FlavorOOCTextChanged()
        {
            OnFlavorOOCTextChanged?.Invoke(Rope.Collapse(CFlavorOOCTextInput.TextRope).Trim());
        }

        public void CharacterTextChanged()
        {
            OnCharacterTextChanged?.Invoke(Rope.Collapse(CCharacterTextInput.TextRope).Trim());
        }

        public void GreenTextChanged()
        {
            OnGreenTextChanged?.Invoke(Rope.Collapse(CGreenTextInput.TextRope).Trim());
        }

        public void YellowTextChanged()
        {
            OnYellowTextChanged?.Invoke(Rope.Collapse(CYellowTextInput.TextRope).Trim());
        }

        public void RedTextChanged()
        {
            OnRedTextChanged?.Invoke(Rope.Collapse(CRedTextInput.TextRope).Trim());
        }

        public void TagsTextChanged()
        {
            OnTagsTextChanged?.Invoke(Rope.Collapse(CTagsTextInput.TextRope).Trim());
        }

        public void LinksTextChanged()
        {
            OnLinksTextChanged?.Invoke(Rope.Collapse(CLinksTextInput.TextRope).Trim());
        }

        public void NSFWTextChanged()
        {
            OnNSFWTextChanged?.Invoke(Rope.Collapse(CNSFWTextInput.TextRope).Trim());
        }
        // Corvax-Wega-Graphomancy-Extended-Edit-end
    }
}