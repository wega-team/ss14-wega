using System.Linq;
using System.Text.RegularExpressions;
using Content.Client.UserInterface.Systems.Interaction;
using Content.Shared.Chat.Prototypes;
using Content.Shared.Popups;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Audio;

namespace Content.Client.Interaction.Panel.Ui
{
    [GenerateTypedNameReferences]
    public sealed partial class InteractionEditorMenu : DefaultWindow
    {
        [Dependency] private readonly EntityManager _entManager = default!;
        [Dependency] private readonly IPlayerManager _playerManager = default!;
        private readonly InteractionUIController _interactionPanelController;
        private SharedPopupSystem _popup;

        private InteractionPrototype? _prototype;
        private LineEdit? _nameLine;
        private LineEdit? _messageLine;
        private LineEdit? _spriteLine;
        private CheckBox? _erpCheckbox;
        private OptionButton? _sexButton;
        private OptionButton? _speciesButton;
        private OptionButton? _targetSexButton;
        private OptionButton? _targetSpeciesButton;
        private CheckBox? _blackCheckbox;
        private OptionButton? _blackListButton;
        private CheckBox? _soundCheckbox;
        private CheckBox? _pathCheckbox;
        private LineEdit? _pathLine;
        private CheckBox? _collectionCheckbox;
        private OptionButton? _collectionButton;
        private ErrorLevel _errorLevel = ErrorLevel.None;

        public InteractionEditorMenu()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _popup = _entManager.System<SharedPopupSystem>();

            _interactionPanelController = UserInterfaceManager.GetUIController<InteractionUIController>();
            EditButton.OnPressed += OnEditButtonPressed;
            DeleteButton.OnPressed += OnDeleteButtonPressed;
        }

        public void SetData(InteractionPrototype prototype)
        {
            _prototype = prototype;
            InitilizeMenu();
        }

        #region Initializing UI
        private void InitilizeMenu()
        {
            if (_prototype == null)
                return;

            EditorContainer.RemoveAllChildren();

            var mainContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                HorizontalExpand = true
            };

            mainContainer.AddChild(CreateInputSection(
                Loc.GetString("interaction-line-edit-name-name"),
                _nameLine = CreateLineEdit(_prototype.Name,
                Loc.GetString("interaction-line-edit-name-placeholder"))
            ));

            mainContainer.AddChild(CreateInputSection(
                Loc.GetString("interaction-line-edit-massage-name"),
                _messageLine = CreateLineEdit(_prototype.UserMessages.FirstOrDefault(),
                Loc.GetString("interaction-line-edit-massage-placeholder"))
            ));

            _nameLine.OnTextChanged += OnNameLineChanged;
            _messageLine.OnTextChanged += OnMessageLineChanged;

            mainContainer.AddChild(CreateInputSection(
                Loc.GetString("interaction-line-edit-sprite-name"),
                _spriteLine = CreateLineEdit(_prototype.Icon,
                Loc.GetString("interaction-line-edit-sprite-placeholder"))
            ));

            mainContainer.AddChild(CreateCheckBoxSection(
                _erpCheckbox = CreateCheckBox(
                    Loc.GetString("interaction-checkbox-erp-name"),
                    _prototype.ERP
                )
            ));

            InitializeOptionButtons();

            mainContainer.AddChild(CreateOptionButtonSection(
                Loc.GetString("interaction-option-button-sex-name"),
                _sexButton,
                (int)Sex.None
            ));

            mainContainer.AddChild(CreateOptionButtonSection(
                Loc.GetString("interaction-option-button-species-name"),
                _speciesButton,
                (int)Species.None
            ));

            mainContainer.AddChild(CreateOptionButtonSection(
                Loc.GetString("interaction-option-button-sex-target-name"),
                _targetSexButton,
                (int)Sex.None
            ));

            mainContainer.AddChild(CreateOptionButtonSection(
                Loc.GetString("interaction-option-button-species-target-name"),
                _targetSpeciesButton,
                (int)Species.None
            ));

            mainContainer.AddChild(CreateCheckBoxWithOptionButtonSection(
                _blackCheckbox = CreateCheckBox(
                    Loc.GetString("interaction-checkbox-black-name"),
                    _prototype.BlackListSpecies != null
                ),
                _blackListButton,
                (int)Species.None
            ));

            mainContainer.AddChild(CreateCheckBoxSection(
                _soundCheckbox = CreateCheckBox(
                    Loc.GetString("interaction-checkbox-sound-name"),
                    _prototype.SoundPerceivedByOthers
                )
            ));

            mainContainer.AddChild(CreateCheckBoxWithLineEditSection(
                _pathCheckbox = CreateCheckBox(
                    Loc.GetString("interaction-line-edit-path-name"),
                    _prototype.InteractSound is SoundPathSpecifier
                ),
                _pathLine = CreateLineEdit(
                    (_prototype.InteractSound as SoundPathSpecifier)?.Path.ToString(),
                    Loc.GetString("interaction-line-edit-path-placeholder")
                )
            ));

            mainContainer.AddChild(CreateCheckBoxWithOptionButtonSection(
                _collectionCheckbox = CreateCheckBox(
                    Loc.GetString("interaction-checkbox-collection-name"),
                    _prototype.InteractSound is SoundCollectionSpecifier
                ),
                _collectionButton,
                (int)Collection.Kisses
            ));

            _pathCheckbox.OnToggled += OnPathCheckboxToggled;
            _collectionCheckbox.OnToggled += OnCollectionCheckboxToggled;

            EditorContainer.AddChild(mainContainer);
            LoadPrototypeData();
        }

        private void InitializeOptionButtons()
        {
            _sexButton = CreateOptionButton() ?? new OptionButton();
            InitializeSexButton(_sexButton);

            _speciesButton = CreateOptionButton() ?? new OptionButton();
            InitializeSpeciesButton(_speciesButton);

            _targetSexButton = CreateOptionButton() ?? new OptionButton();
            InitializeSexButton(_targetSexButton);

            _targetSpeciesButton = CreateOptionButton() ?? new OptionButton();
            InitializeSpeciesButton(_targetSpeciesButton);

            _blackListButton = CreateOptionButton() ?? new OptionButton();
            InitializeSpeciesButton(_blackListButton);

            _collectionButton = CreateOptionButton() ?? new OptionButton();
            InitializeCollectionButton(_collectionButton);
        }

        private void InitializeSexButton(OptionButton button)
        {
            button.AddItem(Loc.GetString("interaction-constructor-none"), (int)Sex.None);
            button.AddItem(Loc.GetString("interaction-constructor-male"), (int)Sex.Male);
            button.AddItem(Loc.GetString("interaction-constructor-female"), (int)Sex.Female);
            button.AddItem(Loc.GetString("interaction-constructor-unsexed"), (int)Sex.Unsexed);

            button.OnItemSelected += args => button.SelectId(args.Id);
        }

        private void InitializeSpeciesButton(OptionButton button)
        {
            button.AddItem(Loc.GetString("interaction-constructor-none"), (int)Species.None);
            button.AddItem(Loc.GetString("interaction-constructor-human"), (int)Species.Human);
            button.AddItem(Loc.GetString("interaction-constructor-dwarf"), (int)Species.Dwarf);
            button.AddItem(Loc.GetString("interaction-constructor-felinid"), (int)Species.Felinid);
            button.AddItem(Loc.GetString("interaction-constructor-moth"), (int)Species.Moth);
            button.AddItem(Loc.GetString("interaction-constructor-reptilian"), (int)Species.Reptilian);
            button.AddItem(Loc.GetString("interaction-constructor-slimeperson"), (int)Species.SlimePerson);
            button.AddItem(Loc.GetString("interaction-constructor-vulpkanin"), (int)Species.Vulpkanin);
            button.AddItem(Loc.GetString("interaction-constructor-skrell"), (int)Species.Skrell);
            button.AddItem(Loc.GetString("interaction-constructor-resomi"), (int)Species.Resomi);
            button.AddItem(Loc.GetString("interaction-constructor-vox"), (int)Species.Vox);
            button.AddItem(Loc.GetString("interaction-constructor-arachnid"), (int)Species.Arachnid);
            button.AddItem(Loc.GetString("interaction-constructor-diona"), (int)Species.Diona);

            button.OnItemSelected += args => button.SelectId(args.Id);
        }

        private void InitializeCollectionButton(OptionButton button)
        {
            button.AddItem(Loc.GetString("interaction-constructor-kisses"), (int)Collection.Kisses);
            button.AddItem(Loc.GetString("interaction-constructor-licks"), (int)Collection.Licks);

            button.OnItemSelected += args => button.SelectId(args.Id);
        }
        #endregion

        #region Event handlers
        private void OnNameLineChanged(LineEdit.LineEditEventArgs args)
        {
            if (_nameLine == null) return;

            if (string.IsNullOrWhiteSpace(args.Text))
            {
                _errorLevel |= ErrorLevel.NameLine;
                _nameLine.ModulateSelfOverride = Color.Red;
            }
            else
            {
                _errorLevel &= ~ErrorLevel.NameLine;
                _nameLine.ModulateSelfOverride = null;
            }

            UpdateButtonState();
        }

        private void OnMessageLineChanged(LineEdit.LineEditEventArgs args)
        {
            if (_messageLine == null) return;

            if (string.IsNullOrWhiteSpace(args.Text))
            {
                _errorLevel |= ErrorLevel.MessageLine;
                _messageLine.ModulateSelfOverride = Color.Red;
            }
            else
            {
                _errorLevel &= ~ErrorLevel.MessageLine;
                _messageLine.ModulateSelfOverride = null;
            }

            UpdateButtonState();
        }

        private void OnPathCheckboxToggled(BaseButton.ButtonEventArgs args)
        {
            if (_collectionCheckbox == null) return;

            if (args.Button.Pressed)
            {
                _collectionCheckbox.Pressed = false;
            }
        }

        private void OnCollectionCheckboxToggled(BaseButton.ButtonEventArgs args)
        {
            if (_pathCheckbox == null) return;

            if (args.Button.Pressed)
            {
                _pathCheckbox.Pressed = false;
            }
        }

        private void UpdateButtonState()
        {
            EditButton.Disabled = _errorLevel != ErrorLevel.None;
        }
        #endregion

        #region Creating UI elements
        private BoxContainer CreateInputSection(string labelText, Control inputControl)
        {
            return new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new Thickness(2),
                Children = { CreateLabel(labelText), inputControl }
            };
        }

        private LineEdit CreateLineEdit(string? initialText, string? placeHolderText)
        {
            return new LineEdit
            {
                Text = initialText ?? "",
                PlaceHolder = placeHolderText ?? "",
                HorizontalExpand = true,
                MinWidth = 100
            };
        }

        private Label CreateLabel(string text) => new()
        {
            Text = text,
            Margin = new Thickness(4),
            MinWidth = 100
        };

        private BoxContainer CreateCheckBoxSection(CheckBox checkBox)
        {
            return new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new Thickness(2),
                Children = { checkBox }
            };
        }

        private OptionButton CreateOptionButton() => new OptionButton();

        private BoxContainer CreateOptionButtonSection(string labelText, OptionButton? button, int defaultId)
        {
            return new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new Thickness(0, 5),
                Children = { CreateLabel(labelText), new Control { HorizontalExpand = true }, button ?? new OptionButton() }
            };
        }

        private BoxContainer CreateCheckBoxWithOptionButtonSection(CheckBox checkBox, OptionButton? button, int defaultId)
        {
            return new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new Thickness(0, 5),
                Children = { checkBox, new Control { HorizontalExpand = true }, button ?? new OptionButton() }
            };
        }

        private BoxContainer CreateCheckBoxWithLineEditSection(CheckBox checkBox, LineEdit lineEdit)
        {
            return new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new Thickness(2),
                Children = { checkBox, new Control { MinWidth = 20 }, lineEdit }
            };
        }

        private CheckBox CreateCheckBox(string text, bool initialState) => new CheckBox
        {
            Text = text,
            Pressed = initialState,
            MinWidth = 100
        };
        #endregion

        #region Data processing logic
        private void LoadPrototypeData()
        {
            if (_prototype == null) return;

            SetOptionButtonValue(_sexButton, GetSexId(_prototype.AllowedGenders?.FirstOrDefault() ?? "all"));
            SetOptionButtonValue(_targetSexButton, GetSexId(_prototype.NearestAllowedGenders?.FirstOrDefault() ?? "all"));
            SetOptionButtonValue(_speciesButton, GetSpeciesId(_prototype.AllowedSpecies?.FirstOrDefault() ?? "all"));
            SetOptionButtonValue(_targetSpeciesButton, GetSpeciesId(_prototype.NearestAllowedSpecies?.FirstOrDefault() ?? "all"));

            if (_prototype.BlackListSpecies != null)
            {
                SetOptionButtonValue(_blackListButton, GetSpeciesId(_prototype.BlackListSpecies.FirstOrDefault()));
            }

            if (_prototype.InteractSound is SoundCollectionSpecifier collection)
            {
                SetOptionButtonValue(_collectionButton, GetCollectionId(collection.Collection));
            }
        }

        private int GetSexId(string? sex) => sex switch
        {
            "Male" => (int)Sex.Male,
            "Female" => (int)Sex.Female,
            "Unsexed" => (int)Sex.Unsexed,
            _ => (int)Sex.None
        };

        private int GetSpeciesId(string? species) => species switch
        {
            "Human" => (int)Species.Human,
            "Dwarf" => (int)Species.Dwarf,
            "Felinid" => (int)Species.Felinid,
            "Moth" => (int)Species.Moth,
            "Reptilian" => (int)Species.Reptilian,
            "SlimePerson" => (int)Species.SlimePerson,
            "Vulpkanin" => (int)Species.Vulpkanin,
            "Skrell" => (int)Species.Skrell,
            "Resomi" => (int)Species.Resomi,
            "Vox" => (int)Species.Vox,
            "Arachnid" => (int)Species.Arachnid,
            "Diona" => (int)Species.Diona,
            _ => (int)Species.None
        };

        private int GetCollectionId(string? collection) => collection switch
        {
            "Kisses" => (int)Collection.Kisses,
            "Licks" => (int)Collection.Licks,
            _ => 0
        };

        private void SetOptionButtonValue(OptionButton? button, int id) => button?.SelectId(id);
        #endregion

        #region Edit pressed logic
        private void OnEditButtonPressed(BaseButton.ButtonEventArgs args)
        {
            if (_errorLevel != ErrorLevel.None || _prototype == null) return;

            var interactionPrototype = CreateInteractionPrototypeFromUI();
            if (interactionPrototype != null)
            {
                _interactionPanelController.AddEditor(interactionPrototype);
            }

            Close();
        }

        private InteractionPrototype? CreateInteractionPrototypeFromUI()
        {
            if (_nameLine == null || _messageLine == null || _spriteLine == null ||
                _erpCheckbox == null || _sexButton == null || _speciesButton == null ||
                _targetSexButton == null || _targetSpeciesButton == null ||
                _blackCheckbox == null || _blackListButton == null ||
                _soundCheckbox == null || _pathCheckbox == null ||
                _pathLine == null || _collectionCheckbox == null ||
                _collectionButton == null || _prototype == null)
                return null;

            var name = _nameLine.Text;
            var message = _messageLine.Text;
            var spritePath = string.IsNullOrWhiteSpace(_spriteLine.Text)
                ? "/Textures/_Wega/Interface/InteractionPanel/heart.png"
                : _spriteLine.Text;

            var interactionPrototype = new InteractionPrototype
            {
                ID = _prototype.ID,
                Name = name,
                UserMessages = new List<string> { message },
                Icon = spritePath,
                ERP = _erpCheckbox.Pressed,
                AllowedGenders = new List<string> { GetSexString(GetSelectedId(_sexButton) ?? 0) },
                AllowedSpecies = new List<string> { GetSpeciesString(GetSelectedId(_speciesButton) ?? 0) },
                NearestAllowedGenders = new List<string> { GetSexString(GetSelectedId(_targetSexButton) ?? 0) },
                NearestAllowedSpecies = new List<string> { GetSpeciesString(GetSelectedId(_targetSpeciesButton) ?? 0) },
                BlackListSpecies = _blackCheckbox.Pressed
                    ? new List<string> { GetSpeciesString(GetSelectedId(_blackListButton) ?? 0) }
                    : null,
                SoundPerceivedByOthers = _soundCheckbox.Pressed,
                InteractSound = GetInteractSound()
            };

            return interactionPrototype;
        }

        private SoundSpecifier? GetInteractSound()
        {
            var pathRegex = new Regex(@"^(/Audio/Voice/|/Audio/Effects/|/Audio/_Wega/Voice/|/Audio/_Wega/Interacrtions/).+\.ogg$", RegexOptions.Compiled);
            if (_pathCheckbox == null || _pathLine == null || _collectionCheckbox == null || _collectionButton == null)
                return null;

            if (_pathCheckbox.Pressed && !string.IsNullOrWhiteSpace(_pathLine.Text) && pathRegex.IsMatch(_pathLine.Text))
            {
                return new SoundPathSpecifier(_pathLine.Text);
            }
            else if (_pathCheckbox.Pressed && !pathRegex.IsMatch(_pathLine.Text))
            {
                var session = _playerManager.LocalSession;
                if (session?.AttachedEntity.HasValue == true)
                    _popup.PopupCursor(Loc.GetString("interaction-invalid-sound"), session.AttachedEntity.Value);
                return null;
            }

            if (_collectionCheckbox.Pressed)
            {
                return new SoundCollectionSpecifier(GetCollectionString(GetSelectedId(_collectionButton) ?? 0));
            }

            return null;
        }

        private int? GetSelectedId(OptionButton optionButton)
        {
            if (optionButton.SelectedId == -1)
                return null;

            return optionButton.SelectedId;
        }

        private string GetSexString(int sexId)
        {
            return sexId switch
            {
                0 => "all",
                1 => "Male",
                2 => "Female",
                3 => "Unsexed",
                _ => throw new ArgumentOutOfRangeException(nameof(sexId), sexId, "Unknown sex ID")
            };
        }

        private string GetSpeciesString(int speciesId)
        {
            return speciesId switch
            {
                0 => "all",
                1 => "Human",
                2 => "Dwarf",
                3 => "Felinid",
                4 => "Moth",
                5 => "Reptilian",
                6 => "SlimePerson",
                7 => "Vulpkanin",
                8 => "Skrell",
                9 => "Resomi",
                10 => "Vox",
                11 => "Arachnid",
                12 => "Diona",
                _ => throw new ArgumentOutOfRangeException(nameof(speciesId), speciesId, "Unknown species ID")
            };
        }

        private string GetCollectionString(int collectionId)
        {
            return collectionId switch
            {
                0 => "Kisses",
                1 => "Licks", // You like kissing boys don't you
                _ => throw new ArgumentOutOfRangeException(nameof(collectionId), collectionId, "Unknown collection ID")
            };
        }
        #endregion

        #region Delete pressed logic
        private void OnDeleteButtonPressed(BaseButton.ButtonEventArgs args)
        {
            if (_prototype == null)
                return;

            _interactionPanelController.DeleteEditor(_prototype);
            Close();
        }
        #endregion

        #region Enums
        [Flags]
        private enum ErrorLevel : byte
        {
            None = 0,
            NameLine = 1 << 0,
            MessageLine = 1 << 1,
        }

        private enum Sex : byte
        {
            None,
            Male,
            Female,
            Unsexed,
        }

        private enum Species : byte
        {
            None,
            Human,
            Dwarf,
            Felinid,
            Moth,
            Reptilian,
            SlimePerson,
            Vulpkanin,
            Skrell,
            Resomi,
            Vox,
            Arachnid,
            Diona,
        }

        private enum Collection : byte
        {
            Kisses,
            Licks,
        }
        #endregion
    }
}
