using System.Linq;
using System.Numerics;
using Content.Client.UserInterface.Systems.Interaction;
using Content.Shared.Buckle.Components;
using Content.Shared.Chat.Prototypes;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.IdentityManagement;
using Content.Shared.Interaction;
using Content.Shared.Interaction.Panel;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

/// In the name of the Father and the Holy Spirit, have mercy on this panel. Amen
namespace Content.Client.Interaction.Panel.Ui
{
    [GenerateTypedNameReferences]
    public sealed partial class InteractionPanelMenu : DefaultWindow
    {
        [Dependency] private readonly IFileDialogManager _dialogManager = default!;
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IEntityManager _entManager = default!;
        [Dependency] private readonly IEntityNetworkManager _entityNetworkManager = default!;
        [Dependency] private readonly IPlayerManager _playerManager = default!;
        [Dependency] private readonly InteractionPanelManager _sharedInteraction = default!;
        private readonly InteractionConstructorUIController _interactionConstructorController;
        private readonly InteractionEditorUIController _interactionEditorController;
        private static List<InteractionPrototype> _importedPrototypes = new(); // Memory
        private static List<BoxContainer> _importedButtons = new(); // Memory
        private static List<BoxContainer> _favoriteButtons = new(); // Memory
        private static List<InteractionPrototype> _favoritePrototypes = new(); // Memory
        private List<BoxContainer> _allButtons = new();
        private TransformSystem _transform;
        private EntityLookupSystem _lookup;
        private ISawmill _sawmill = default!;
        private float _updateDif;

        private SpriteView _userSpriteView;
        private SpriteView _targetSpriteView;
        private Label _targetLabel;
        private Label _userGenderLabel;
        private Label _targetGenderLabel;

        public InteractionPanelMenu()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _interactionConstructorController = UserInterfaceManager.GetUIController<InteractionConstructorUIController>();
            _interactionEditorController = UserInterfaceManager.GetUIController<InteractionEditorUIController>();

            _transform = _entManager.System<TransformSystem>();
            _lookup = _entManager.System<EntityLookupSystem>();
            _sawmill = Logger.GetSawmill("interaction_import");

            _userSpriteView = CreateSpriteView();
            UserSpriteView.AddChild(_userSpriteView);

            _targetSpriteView = CreateSpriteView();
            TargetSpriteView.AddChild(_targetSpriteView);

            _targetLabel = CreateLabel();
            _userGenderLabel = CreateLabel();
            _targetGenderLabel = CreateLabel();

            var importButton = FindControl<Button>("ImportButton");
            var constructorButton = FindControl<Button>("ConstructorButton");

            importButton.OnButtonUp += _ => HandleImport();
            constructorButton.OnButtonUp += _ => HandleConstructor();

            SearchBar.OnTextChanged += OnSearchTextChanged;

            InitializeNamesContainer();
            _playerManager.PlayerStatusChanged += OnUserStatusChanged;

            SetupHeading(Special);
            SetupHeading(Favourites);
            SetupHeading(Harmless);
            SetupHeading(Outspoken);

            PopulateInteractions();
            UpdateTarget();
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            _updateDif += args.DeltaSeconds;
            if (_updateDif < 1.0f)
                return;

            _updateDif -= 1.0f;

            // Update panel
            InitializeNamesContainer();
            PopulateInteractions();
            UpdateTarget();
        }

        #region Initialized
        private void InitializeNamesContainer()
        {
            Names.RemoveAllChildren();

            var session = _playerManager.LocalSession;
            if (session?.AttachedEntity.HasValue == true)
            {
                var user = session.AttachedEntity.Value;
                var appearanceComponent = _entManager.GetComponentOrNull<HumanoidAppearanceComponent>(user);

                var label = CreateLabel();
                label.Text = Loc.GetString("interact-player");
                Names.AddChild(label);

                var userGenderIcon = CreateGenderIconButton(appearanceComponent?.Sex);
                if (userGenderIcon != null)
                {
                    userGenderIcon.Orphan();
                    Names.AddChild(userGenderIcon);
                }
            }

            _targetLabel.Orphan();
            Names.AddChild(CreateSpacer());
            Names.AddChild(_targetLabel);
        }

        private void OnUserStatusChanged(object? sender, SessionStatusEventArgs e)
        {
            if (e.Session.AttachedEntity.HasValue)
            {
                UpdateUser(e.Session.AttachedEntity.Value);
                UpdateTarget();
            }
        }

        private TextureButton CreateGenderIconButton(Sex? sex)
        {
            var texturePath = sex switch
            {
                Sex.Male => "/Textures/_Wega/Interface/InteractionPanel/male.png",
                Sex.Female => "/Textures/_Wega/Interface/InteractionPanel/female.png",
                Sex.Unsexed => "/Textures/_Wega/Interface/InteractionPanel/unsexed.png",
                _ => "/Textures/_Wega/Interface/InteractionPanel/unknown.png"
            };

            var textureResource = IoCManager.Resolve<IResourceCache>().GetResource<TextureResource>(new ResPath(texturePath));
            return new TextureButton
            {
                TextureNormal = textureResource.Texture,
                Margin = new Thickness(4),
                Scale = new Vector2(0.5f, 0.5f)
            };
        }

        private SpriteView CreateSpriteView() => new()
        {
            OverrideDirection = Direction.South,
            Scale = new Vector2(2, 2),
            SetSize = new Vector2(64, 64)
        };

        private Label CreateLabel() => new()
        {
            Margin = new Thickness(4)
        };

        private BoxContainer CreateSpacer() => new()
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            MinHeight = 4,
            HorizontalExpand = true,
            Margin = new Thickness(0)
        };

        private void SetupHeading(CollapsibleHeading heading)
        {
            heading.AddStyleClass(ContainerButton.StyleClassButton);
            heading.Label.HorizontalAlignment = HAlignment.Center;
            heading.Label.HorizontalExpand = true;
        }
        #endregion

        #region Methods
        /// <summary>
        /// Whoever is reading this, shut the fuck down if there are problems with downloading.
        /// It's not worth it, they'll decide later. BE PATIENT.
        /// </summary>
        private async void HandleImport()
        {
            await using var file = await _dialogManager.OpenFile(new FileDialogFilters(new FileDialogFilters.Group("yml")));

            if (file == null)
                return;

            try
            {
                var prototypes = _sharedInteraction.FromStream(file);
                if (!prototypes.Any())
                    return;

                _importedButtons.Clear();
                _importedPrototypes.Clear();
                SpecialContainer.RemoveAllChildren();

                foreach (var prototype in prototypes)
                {
                    if (prototype is not InteractionPrototype interactionPrototype)
                        continue;

                    if (_allButtons.Any(b => b.Children.OfType<Button>().Any(btn => btn.Name == interactionPrototype.ID)))
                        continue;

                    _importedPrototypes.Add(interactionPrototype);
                }

                PopulateInteractions();
            }
            catch (Exception exc)
            {
                _sawmill.Error($"Error when importing buttons\n{exc.StackTrace}");
            }
        }

        private void HandleConstructor()
        {
            _interactionConstructorController.ToggleWindow();
        }

        public void HandleAddConstructor(InteractionPrototype prototype)
        {
            _importedPrototypes.Add(prototype);
            PopulateInteractions();
        }

        public void HandleAddEdit(InteractionPrototype prototype)
        {
            var existingPrototype = _importedPrototypes.FirstOrDefault(p => p.ID == prototype.ID);
            if (existingPrototype != null)
            {
                _importedPrototypes.Remove(existingPrototype);
            }

            _importedPrototypes.Add(prototype);
            PopulateInteractions();
        }

        public void HandleDeleteEdit(InteractionPrototype prototype)
        {
            var existingPrototype = _importedPrototypes.FirstOrDefault(p => p.ID == prototype.ID);
            if (existingPrototype != null)
            {
                _importedPrototypes.Remove(existingPrototype);
            }

            if (!_importedPrototypes.Any())
            {
                _importedButtons.Clear();
                _importedPrototypes.Clear();
                SpecialContainer.RemoveAllChildren();
            }

            PopulateInteractions();
        }

        private void OnPinPressed(InteractionPrototype prototype)
        {
            var existingPrototype = _favoritePrototypes.FirstOrDefault(p => p.ID == prototype.ID);
            if (existingPrototype != null)
                return;

            _favoritePrototypes.Add(prototype);
            PopulateInteractions();
        }

        private void OnUnPinPressed(InteractionPrototype prototype)
        {
            _favoritePrototypes.Remove(prototype);
            if (!_favoritePrototypes.Any())
            {
                _favoriteButtons.Clear();
                _favoritePrototypes.Clear();
                FavouritesContainer.RemoveAllChildren();
            }

            PopulateInteractions();
        }

        private void UpdateTarget()
        {
            _targetSpriteView.RemoveAllChildren();

            var session = _playerManager.LocalSession;
            if (session?.AttachedEntity == null) return;

            var user = session.AttachedEntity.Value;
            var target = FindTarget(user);

            if (target.HasValue)
            {
                _targetSpriteView.SetEntity(target.Value);

                _targetLabel.Text = Identity.Name(target.Value, _entManager, session.AttachedEntity);

                var appearanceComponent = _entManager.GetComponentOrNull<HumanoidAppearanceComponent>(target.Value);
                UpdateGender(user, appearanceComponent, _targetGenderLabel);
            }
            else
            {
                _targetSpriteView.SetEntity(EntityUid.Invalid);
                _targetGenderLabel.Text = "";
                _targetLabel.Text = "";

                _targetGenderLabel.Orphan();
                TargetSpriteView.AddChild(_targetGenderLabel);
            }
        }

        private void UpdateGender(EntityUid user, HumanoidAppearanceComponent? appearanceComponent, Label genderLabel)
        {
            genderLabel.Orphan();

            if (appearanceComponent == null)
            {
                genderLabel.Text = Loc.GetString("unknown-nearestplayer");
                TargetSpriteView.AddChild(genderLabel);
                return;
            }

            var targetGenderIcon = CreateGenderIconButton(appearanceComponent.Sex);
            if (targetGenderIcon != null)
            {
                targetGenderIcon.Orphan();
                Names.AddChild(targetGenderIcon);
            }

            var appearanceUserComponent = _entManager.GetComponentOrNull<HumanoidAppearanceComponent>(user);
            if (appearanceUserComponent?.Status == Status.No)
            {
                genderLabel.Text = "";
                genderLabel.Orphan();
                TargetSpriteView.AddChild(genderLabel);
                return;
            }

            var dionaSpecies = new ProtoId<SpeciesPrototype>("Diona");
            var arachnidSpecies = new ProtoId<SpeciesPrototype>("Arachnid");
            var voxSpecies = new ProtoId<SpeciesPrototype>("Vox");

            genderLabel.Text = appearanceComponent.Species switch
            {
                var species when species == dionaSpecies => string.Join("\n", Loc.GetString("diona-leaves"), Loc.GetString("diona-branches")),
                var species when species == arachnidSpecies => Loc.GetString("arachnid-nearestplayer"),
                var species when species == voxSpecies => Loc.GetString("vox-nearestplayer"),
                _ => appearanceComponent.Sex switch
                {
                    Sex.Male => string.Join("\n", Loc.GetString("male-anal"), Loc.GetString("male-dick")),
                    Sex.Female => string.Join("\n", Loc.GetString("female-anal"), Loc.GetString("female-vagine"), Loc.GetString("female-breasts")),
                    Sex.Unsexed => Loc.GetString("unsexed-nearestplayer"),
                    _ => Loc.GetString("unknown-nearestplayer")
                }
            };

            genderLabel.Orphan();
            TargetSpriteView.AddChild(genderLabel);
        }

        public void UpdateUser(EntityUid user)
        {
            _userSpriteView.SetEntity(user);

            var appearanceComponent = _entManager.GetComponentOrNull<HumanoidAppearanceComponent>(user);
            if (appearanceComponent?.Status == Status.No)
            {
                _userGenderLabel.Text = "";
                _userGenderLabel.Orphan();
                UserSpriteView.AddChild(_userGenderLabel);
                Outspoken.Visible = false;
                return;
            }

            var dionaSpecies = new ProtoId<SpeciesPrototype>("Diona");
            var arachnidSpecies = new ProtoId<SpeciesPrototype>("Arachnid");
            var voxSpecies = new ProtoId<SpeciesPrototype>("Vox");

            _userGenderLabel.Text = appearanceComponent?.Species switch
            {
                var species when species == dionaSpecies => string.Join("\n", Loc.GetString("diona-leaves-player"), Loc.GetString("diona-branches-player")),
                var species when species == arachnidSpecies => Loc.GetString("arachnid-player"),
                var species when species == voxSpecies => Loc.GetString("vox-player"),
                _ => appearanceComponent?.Sex switch
                {
                    Sex.Male => string.Join("\n", Loc.GetString("male-anal-player"), Loc.GetString("male-dick-player")),
                    Sex.Female => string.Join("\n", Loc.GetString("female-anal-player"), Loc.GetString("female-vagine-player"), Loc.GetString("female-breasts-player")),
                    Sex.Unsexed => Loc.GetString("unsexed-player"),
                    _ => Loc.GetString("unknown-player")
                }
            };

            _userGenderLabel.Orphan();
            UserSpriteView.AddChild(_userGenderLabel);
        }

        private void PopulateInteractions()
        {
            _allButtons.Clear();

            var interactionPrototypes = _prototypeManager.EnumeratePrototypes<InteractionPrototype>();
            var session = _playerManager.LocalSession;

            if (session?.AttachedEntity == null) return;

            var user = session.AttachedEntity.Value;
            if (!_entManager.TryGetComponent<HumanoidAppearanceComponent>(user, out var appearanceComponent)) return;

            var target = FindTarget(user);
            foreach (var prototype in interactionPrototypes)
            {
                if (target.HasValue && !IsInteractionAllowed(prototype, appearanceComponent, target.Value))
                    continue;

                if (_importedButtons.Any(b => b.Children.OfType<Button>().Any(btn => btn.Name == prototype.ID)))
                    continue;

                var buttonContainer = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    HorizontalExpand = false,
                    Margin = new Thickness(0.1f)
                };

                var button = new Button
                {
                    Text = Loc.GetString(prototype.Name),
                    Name = prototype.ID,
                    MinWidth = 360,
                    MinHeight = 32
                };

                var pinButton = new Button
                {
                    Text = Loc.GetString("interaction-panel-pin"),
                    MinWidth = 52,
                    MinHeight = 32
                };

                button.OnButtonDown += args => OnInteractionPressed(prototype.ID);
                pinButton.OnButtonDown += args => OnPinPressed(prototype);

                if (!string.IsNullOrEmpty(prototype.Icon))
                {
                    var texturePath = new ResPath(prototype.Icon.StartsWith("/") ? prototype.Icon : $"/Textures/{prototype.Icon}");
                    var textureResource = IoCManager.Resolve<IResourceCache>().GetResource<TextureResource>(texturePath);

                    var iconButton = new TextureButton
                    {
                        TextureNormal = textureResource.Texture,
                        Margin = new Thickness(4),
                        Scale = new Vector2(1f, 1f)
                    };

                    buttonContainer.AddChild(iconButton);
                }

                buttonContainer.AddChild(button);
                buttonContainer.AddChild(pinButton);
                _allButtons.Add(buttonContainer);

                if (prototype.ERP)
                {
                    OutspokenContainer.AddChild(buttonContainer);
                }
                else
                {
                    HarmlessContainer.AddChild(buttonContainer);
                }
            }

            if (_importedPrototypes.Any())
            {
                _importedButtons.Clear();

                foreach (var interactionPrototype in _importedPrototypes)
                {
                    if (target.HasValue && !IsInteractionAllowed(interactionPrototype, appearanceComponent, target.Value))
                        continue;

                    if (_importedButtons.Any(b => b.Children.OfType<Button>().Any(btn => btn.Name == interactionPrototype.ID)))
                        continue;

                    var buttonContainer = new BoxContainer
                    {
                        Orientation = BoxContainer.LayoutOrientation.Horizontal,
                        HorizontalExpand = false,
                        Margin = new Thickness(0.1f)
                    };

                    var button = new Button
                    {
                        Text = Loc.GetString(interactionPrototype.Name),
                        Name = interactionPrototype.ID,
                        MinWidth = 360,
                        MinHeight = 32
                    };

                    var editorButton = new Button
                    {
                        Text = Loc.GetString("interaction-panel-editor"),
                        MinWidth = 52,
                        MinHeight = 32
                    };

                    button.OnButtonDown += args => OnInteractionPressed(interactionPrototype.ID, interactionPrototype);
                    editorButton.OnButtonDown += args => OnEditorPressed(interactionPrototype);

                    if (!string.IsNullOrEmpty(interactionPrototype.Icon))
                    {
                        var texturePath = new ResPath(interactionPrototype.Icon.StartsWith("/") ? interactionPrototype.Icon : $"/Textures/{interactionPrototype.Icon}");
                        var textureResource = IoCManager.Resolve<IResourceCache>().GetResource<TextureResource>(texturePath);

                        var iconButton = new TextureButton
                        {
                            TextureNormal = textureResource.Texture,
                            Margin = new Thickness(4),
                            Scale = new Vector2(1f, 1f)
                        };

                        buttonContainer.AddChild(iconButton);
                    }

                    buttonContainer.AddChild(button);
                    buttonContainer.AddChild(editorButton);
                    _importedButtons.Add(buttonContainer);
                    SpecialContainer.AddChild(buttonContainer);
                }
            }

            if (_favoritePrototypes.Any())
            {
                _favoriteButtons.Clear();

                foreach (var interactionPrototype in _favoritePrototypes)
                {
                    if (target.HasValue && !IsInteractionAllowed(interactionPrototype, appearanceComponent, target.Value))
                        continue;

                    if (_favoriteButtons.Any(b => b.Children.OfType<Button>().Any(btn => btn.Name == interactionPrototype.ID)))
                        continue;

                    var buttonContainer = new BoxContainer
                    {
                        Orientation = BoxContainer.LayoutOrientation.Horizontal,
                        HorizontalExpand = false,
                        Margin = new Thickness(0.1f)
                    };

                    var button = new Button
                    {
                        Text = Loc.GetString(interactionPrototype.Name),
                        Name = interactionPrototype.ID,
                        MinWidth = 360,
                        MinHeight = 32
                    };

                    var unPinButton = new Button
                    {
                        Text = Loc.GetString("interaction-panel-unpin"),
                        MinWidth = 52,
                        MinHeight = 32
                    };

                    button.OnButtonDown += args => OnInteractionPressed(interactionPrototype.ID);
                    unPinButton.OnButtonDown += args => OnUnPinPressed(interactionPrototype);

                    if (!string.IsNullOrEmpty(interactionPrototype.Icon))
                    {
                        var texturePath = new ResPath(interactionPrototype.Icon.StartsWith("/") ? interactionPrototype.Icon : $"/Textures/{interactionPrototype.Icon}");
                        var textureResource = IoCManager.Resolve<IResourceCache>().GetResource<TextureResource>(texturePath);

                        var iconButton = new TextureButton
                        {
                            TextureNormal = textureResource.Texture,
                            Margin = new Thickness(4),
                            Scale = new Vector2(1f, 1f)
                        };

                        buttonContainer.AddChild(iconButton);
                    }

                    buttonContainer.AddChild(button);
                    buttonContainer.AddChild(unPinButton);
                    _favoriteButtons.Add(buttonContainer);
                    FavouritesContainer.AddChild(buttonContainer);
                }
            }

            UpdateButtonsVisibility();
        }

        private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
        {
            UpdateButtonsVisibility();
        }

        private void UpdateButtonsVisibility()
        {
            var searchText = SearchBar.Text.ToLower();

            SpecialContainer.RemoveAllChildren();
            FavouritesContainer.RemoveAllChildren();
            HarmlessContainer.RemoveAllChildren();
            OutspokenContainer.RemoveAllChildren();

            foreach (var buttonContainer in _allButtons)
            {
                var button = buttonContainer.Children.OfType<Button>().FirstOrDefault();
                if (button == null || string.IsNullOrEmpty(button.Name)) continue;

                bool isVisible = string.IsNullOrEmpty(searchText) || button.Text?.ToLower().Contains(searchText) == true;

                if (isVisible)
                {
                    var prototype = _prototypeManager.Index<InteractionPrototype>(button.Name);
                    if (prototype == null) continue;

                    (prototype.ERP ? OutspokenContainer : HarmlessContainer).AddChild(buttonContainer);
                }
            }

            foreach (var buttonContainer in _importedButtons)
            {
                var button = buttonContainer.Children.OfType<Button>().FirstOrDefault();
                if (button == null || string.IsNullOrEmpty(button.Name)) continue;

                bool isVisible = string.IsNullOrEmpty(searchText) || button.Text?.ToLower().Contains(searchText) == true;

                if (isVisible)
                {
                    SpecialContainer.AddChild(buttonContainer);
                }
            }

            foreach (var buttonContainer in _favoriteButtons)
            {
                var button = buttonContainer.Children.OfType<Button>().FirstOrDefault();
                if (button == null || string.IsNullOrEmpty(button.Name)) continue;

                bool isVisible = string.IsNullOrEmpty(searchText) || button.Text?.ToLower().Contains(searchText) == true;

                if (isVisible)
                {
                    FavouritesContainer.AddChild(buttonContainer);
                }
            }
        }

        private EntityUid? FindTarget(EntityUid user)
        {
            if (!_entManager.TryGetComponent<TransformComponent>(user, out var sourceTransform)) return null;

            var playerManager = IoCManager.Resolve<IPlayerManager>();
            var sourceWorldPosition = _transform.GetWorldPosition(user);
            var nearbyEntities = _lookup.GetEntitiesInRange<HumanoidAppearanceComponent>(sourceTransform.Coordinates, 2f);

            var target = nearbyEntities
                .Where(e => e.Owner != user)
                .Select(e => (Entity: e.Owner, Distance: Vector2.Distance(sourceWorldPosition, _transform.GetWorldPosition(e.Owner))))
                .OrderBy(e => e.Distance)
                .FirstOrDefault();

            if (target.Entity == default)
            {
                var strapEntities = _lookup.GetEntitiesInRange<StrapComponent>(sourceTransform.Coordinates, 2f);
                foreach (var strapEntity in strapEntities)
                {
                    var strap = strapEntity.Owner;
                    if (!_entManager.TryGetComponent<StrapComponent>(strap, out var strapComponent))
                        continue;

                    foreach (var buckledEntity in strapComponent.BuckledEntities)
                    {
                        if (buckledEntity == user)
                            continue;

                        if (!_entManager.TryGetComponent<TransformComponent>(buckledEntity, out var buckledEntityTransform))
                            continue;

                        var buckledEntityWorldPosition = _transform.GetWorldPosition(buckledEntity);
                        var distance = Vector2.Distance(sourceWorldPosition, buckledEntityWorldPosition);
                        if (distance <= 2f)
                        {
                            target = (Entity: buckledEntity, Distance: distance);
                            break;
                        }
                    }

                    if (target.Entity != default)
                        break;
                }
            }

            var sessionForHumanoid = playerManager.Sessions.FirstOrDefault(session => session.AttachedEntity == target.Entity);
            if (target.Entity == default || sessionForHumanoid == null)
                return null;

            return target.Entity;
        }
        #endregion

        #region Logic
        private bool IsInteractionAllowed(InteractionPrototype prototype, HumanoidAppearanceComponent userAppearance, EntityUid target)
        {
            if (!_entManager.TryGetComponent<HumanoidAppearanceComponent>(target, out var targetAppearance))
                return false;

            bool isSpeciesAllowed = prototype.AllowedSpecies?.Contains("all") == true || prototype.AllowedSpecies?.Contains(userAppearance.Species) == true;
            bool isSpeciesBlacklisted = prototype.BlackListSpecies?.Contains(userAppearance.Species) == true || prototype.BlackListSpecies?.Contains(targetAppearance.Species) == true;
            bool isGenderAllowed = prototype.AllowedGenders?.Contains("all") == true || prototype.AllowedGenders?.Contains(userAppearance.Sex.ToString()) == true;
            bool isNearestSpeciesAllowed = prototype.NearestAllowedSpecies?.Contains("all") == true || prototype.NearestAllowedSpecies?.Contains(targetAppearance.Species) == true;
            bool isNearestGenderAllowed = prototype.NearestAllowedGenders?.Contains("all") == true || prototype.NearestAllowedGenders?.Contains(targetAppearance.Sex.ToString()) == true;
            bool isTargetEntityAllowed = prototype.TargetEntityId == null || prototype.TargetEntityId.Contains(target.ToString());
            bool isErpAllowed = prototype.ERP && userAppearance.Status != Status.No && targetAppearance.Status != Status.No;

            return isSpeciesAllowed && !isSpeciesBlacklisted && isGenderAllowed && isNearestSpeciesAllowed && isNearestGenderAllowed && isTargetEntityAllowed && (!prototype.ERP || isErpAllowed);
        }

        private void OnInteractionPressed(string interactionId)
        {
            var session = _playerManager.LocalSession;
            if (session?.AttachedEntity == null) return;

            var user = session.AttachedEntity.Value;
            if (!_entManager.TryGetNetEntity(user, out var userEntity)) return;

            var target = FindTarget(user);
            if (target == null) return;

            _entityNetworkManager.SendSystemNetworkMessage(new InteractionPressedEvent(userEntity.Value, interactionId, _entManager.GetNetEntity(target), null));
        }

        private void OnInteractionPressed(string interactionId, InteractionPrototype prototype)
        {
            var session = _playerManager.LocalSession;
            if (session?.AttachedEntity == null) return;

            var user = session.AttachedEntity.Value;
            if (!_entManager.TryGetNetEntity(user, out var userEntity)) return;

            var target = FindTarget(user);
            if (target == null) return;

            _entityNetworkManager.SendSystemNetworkMessage(new InteractionPressedEvent(userEntity.Value, interactionId, _entManager.GetNetEntity(target), prototype));
        }

        private void OnEditorPressed(InteractionPrototype prototype)
        {
            _interactionEditorController.ToggleWindow(prototype);
        }
        #endregion
    }
}
