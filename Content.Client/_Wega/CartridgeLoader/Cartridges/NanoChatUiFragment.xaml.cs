using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Shared.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Wega.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class NanoChatUiFragment : BoxContainer
{
    public Action? OpenAddContact;
    public Action? OnMutePressed;
    public Action? OpenEmojiPicker;
    public Action<string>? SetActiveChat;
    public Action<string>? SendMessage;
    public Action<string>? EraseChat;
    public Action<string>? CloseChat;
    public Action<string>? LeaveChat;
    public Action? JoinGroup;
    public Action? CreateGroup;

    private NanoChatEmojiPopup? _emojiPopup;

    public string? ActiveChatId;
    public Dictionary<string, ChatContact> Contacts = new();
    public Dictionary<string, ChatGroup> Groups = new();

    public NanoChatUiFragment()
    {
        RobustXamlLoader.Load(this);
        Orientation = LayoutOrientation.Vertical;

        ChatTypeTabs.SetTabTitle(0, Loc.GetString("nano-chat-ui-tab-contacts"));
        ChatTypeTabs.SetTabTitle(1, Loc.GetString("nano-chat-ui-tab-groups"));

        AddContactButton.OnPressed += _ => OpenAddContact?.Invoke();
        JoinGroupButton.OnPressed += _ => JoinGroup?.Invoke();
        CreateGroupButton.OnPressed += _ => CreateGroup?.Invoke();
        MuteChatButton.OnPressed += _ => OnMutePressed?.Invoke();
        EmojiButton.OnPressed += _ => OpenEmojiPicker?.Invoke();

        SendButton.OnPressed += _ =>
        {
            if (ActiveChatId != null && !string.IsNullOrWhiteSpace(MessageInput.Text))
            {
                SendMessage?.Invoke(MessageInput.Text);
                MessageInput.Text = "";
            }
        };

        EraseChatButton.OnPressed += _ =>
        {
            if (ActiveChatId != null)
            {
                EraseChat?.Invoke(ActiveChatId);
                ActiveChatId = null;
            }
        };

        LeaveChatButton.OnPressed += _ =>
        {
            if (ActiveChatId != null && ActiveChatId.StartsWith("G"))
            {
                LeaveChat?.Invoke(ActiveChatId);
                ActiveChatId = null;
                UpdateUiState();
            }
        };

        CloseChatButton.OnPressed += _ =>
        {
            if (ActiveChatId != null)
            {
                CloseChat?.Invoke(ActiveChatId);
                ActiveChatId = null;
                UpdateUiState();
            }
        };

        MessageInput.OnTextEntered += args =>
        {
            if (ActiveChatId != null && !string.IsNullOrWhiteSpace(args.Text))
            {
                SendMessage?.Invoke(args.Text);
                MessageInput.Text = "";
            }
        };

        ChatTypeTabs.OnTabChanged += _ => OnTabChanged();

        EmojiButton.AddStyleClass(StyleNano.ButtonOpenBoth);
        SendButton.AddStyleClass(StyleNano.ButtonOpenLeft);

        UpdateUiState();
    }

    private void OnTabChanged()
    {
        UpdateContactsList();
    }

    public void UpdateState(NanoChatUiState state)
    {
        OwnIdLabel.Text = state.ChatId;
        Contacts = state.Contacts;
        Groups = state.Groups;
        ActiveChatId = state.ActiveChat;

        MuteChatButton.TexturePath = state.Muted
            ? "/Textures/_Wega/Interface/soundoff.svg.192dpi"
            : "/Textures/_Wega/Interface/sound.svg.192dpi";
        MuteChatButton.ToolTip = state.Muted
            ? Loc.GetString("nano-chat-ui-unmute-tooltip")
            : Loc.GetString("nano-chat-ui-mute-tooltip");

        // Update contacts and groups lists
        UpdateContactsList();

        // Update messages if we have active chat
        if (state.ActiveChat != null && state.ActiveChatMessages != null)
        {
            UpdateMessages(state.ActiveChatMessages);
        }
        else
        {
            MessagesContainer.RemoveAllChildren();
        }

        UpdateUiState();
    }

    public void InitializeEmojiPicker()
    {
        _emojiPopup = new NanoChatEmojiPopup();
        _emojiPopup.OnEmojiSelected += emoji =>
        {
            if (ActiveChatId != null)
            {
                MessageInput.Text += emoji;
                MessageInput.CursorPosition = MessageInput.Text.Length;
            }
        };
    }

    public void OpenEmojiPickerInternal()
    {
        if (_emojiPopup == null)
            InitializeEmojiPicker();

        _emojiPopup?.OpenCentered();
    }

    private void UpdateContactsList()
    {
        ContactsContainer.RemoveAllChildren();
        GroupsContainer.RemoveAllChildren();

        NoContactsLabel.Visible = Contacts.Count == 0 && ChatTypeTabs.CurrentTab == 0;
        NoGroupsLabel.Visible = Groups.Count == 0 && ChatTypeTabs.CurrentTab == 1;

        if (ChatTypeTabs.CurrentTab == 0)
        {
            foreach (var contact in Contacts.Values.OrderBy(c => c.ContactName))
            {
                var control = new NanoChatContactControl(contact);
                control.OnPressed += () => SetActiveChat?.Invoke(contact.ContactId);
                ContactsContainer.AddChild(control);
            }
        }
        else
        {
            foreach (var group in Groups.Values.OrderBy(g => g.GroupName))
            {
                var control = new NanoChatGroupControl(group);
                control.OnPressed += () => SetActiveChat?.Invoke(group.GroupId);
                GroupsContainer.AddChild(control);
            }
        }
    }

    private void UpdateMessages(List<ChatMessage> messages)
    {
        MessagesContainer.RemoveAllChildren();

        foreach (var message in messages)
        {
            var messageControl = new NanoChatMessageControl(message);
            MessagesContainer.AddChild(messageControl);

            // Add some spacing between messages
            MessagesContainer.AddChild(new Control { MinSize = new Vector2(0, 4) });
        }
    }

    private void UpdateUiState()
    {
        var hasActiveChat = ActiveChatId != null;
        var isGroupChat = hasActiveChat && ActiveChatId?.StartsWith("G") == true;

        // Update input state
        MessageInput.Editable = hasActiveChat;
        MessageInput.PlaceHolder = hasActiveChat
            ? Loc.GetString("nano-chat-ui-message-placeholder")
            : Loc.GetString("nano-chat-ui-select-chat-input");
        EmojiButton.Disabled = !hasActiveChat;
        SendButton.Disabled = !hasActiveChat;

        // Update button visibility
        EraseChatButton.Visible = hasActiveChat && !isGroupChat;
        LeaveChatButton.Visible = hasActiveChat && isGroupChat;
        CloseChatButton.Visible = hasActiveChat;

        // Update chat title
        if (ActiveChatId != null)
        {
            if (isGroupChat && Groups.TryGetValue(ActiveChatId, out var group))
            {
                ChatTitle.Text = $"{group.GroupName} {ActiveChatId}";
            }
            else if (!isGroupChat && Contacts.TryGetValue(ActiveChatId, out var contact))
            {
                ChatTitle.Text = contact.ContactName;
            }
            else
            {
                ChatTitle.Text = Loc.GetString("nano-chat-ui-unknown-chat");
            }
        }
        else
        {
            ChatTitle.Text = Loc.GetString("nano-chat-ui-select-chat");
            MessagesContainer.RemoveAllChildren();
        }
    }
}
