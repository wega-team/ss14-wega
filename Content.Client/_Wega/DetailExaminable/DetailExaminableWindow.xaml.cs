using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.DetailExaminable;
using Content.Shared.Humanoid;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Wega.DetailExaminable;

[GenerateTypedNameReferences]
public sealed partial class DetailExaminableWindow : FancyWindow
{
    public DetailExaminableWindow()
    {
        RobustXamlLoader.Load(this);
    }

    public void UpdateState(DetailExaminableEuiState state, IEntityManager entManager)
    {
        PreviewTabs.SetTabTitle(0, Loc.GetString("flavor-tab-flavor"));
        PreviewTabs.SetTabTitle(1, Loc.GetString("flavor-tab-character"));
        PreviewTabs.SetTabTitle(2, Loc.GetString("flavor-tab-gyr"));
        PreviewTabs.SetTabTitle(3, Loc.GetString("flavor-tab-nsfw"));

        var species = Loc.GetString($"species-name-{state.Species.ToString().ToLower()}");
        var sex = Loc.GetString($"humanoid-profile-editor-sex-{state.Sex.ToString().ToLower()}-text");
        var gender = Loc.GetString($"humanoid-profile-editor-pronouns-{state.Gender.ToString().ToLower()}-text");

        PreviewNameText.Text = state.Name;
        PreviewGenderText.Text = $"{species}|{sex}|{gender}";
        PreviewERPStatusText.Text = GetStatusText(state.ERPStatus);
        PreviewERPStatusText.FontColorOverride = GetStatusColor(state.ERPStatus);

        TargetPreview.SetEntity(entManager.GetEntity(state.Target));

        PreviewAppearanceText.SetMessage(GetContentWithEmptyMessage(state.FlavorText, "detail-examinable-empty-flavor"));
        PreviewTraitsText.SetMessage(GetContentWithEmptyMessage(state.CharacterFlavorText, "detail-examinable-empty-character"));
        PreviewOOCText.SetMessage(GetContentWithEmptyMessage(state.OOCFlavorText, "detail-examinable-empty-ooc"));
        PreviewNSFWText.SetMessage(GetContentWithEmptyMessage(state.NSFWFlavorText, "detail-examinable-empty-nsfw"));

        PreviewGYRContainer.RemoveAllChildren();
        CreateGYRBigTextLabel(Loc.GetString($"humanoid-profile-editor-gyr-green"), Color.Green);
        CreateGYRTextLabel(GetContentWithEmptyMessage(state.GreenFlavorText, "detail-examinable-empty-green"));
        CreateGYRBigTextLabel(Loc.GetString($"humanoid-profile-editor-gyr-yellow"), Color.Yellow);
        CreateGYRTextLabel(GetContentWithEmptyMessage(state.YellowFlavorText, "detail-examinable-empty-yellow"));
        CreateGYRBigTextLabel(Loc.GetString($"humanoid-profile-editor-gyr-red"), Color.Red);
        CreateGYRTextLabel(GetContentWithEmptyMessage(state.RedFlavorText, "detail-examinable-empty-red"));

        PreviewTagsText.Text = state.TagsFlavorText;
        ProcessLinks(state.LinksFlavorText);
    }

    private string GetContentWithEmptyMessage(string content, string emptyMessageKey)
    {
        if (string.IsNullOrWhiteSpace(content))
            return Loc.GetString(emptyMessageKey);
        return content;
    }

    private void CreateGYRBigTextLabel(string text, Color color)
    {
        var label = new Label
        {
            Text = text,
            VerticalExpand = true,
            StyleClasses = { StyleNano.StyleClassLabelBig },
            FontColorOverride = color
        };

        PreviewGYRContainer.AddChild(label);
    }

    private void CreateGYRTextLabel(string text)
    {
        var label = new RichTextLabel
        {
            Text = text + "\n",
            VerticalExpand = true
        };

        PreviewGYRContainer.AddChild(label);
    }

    private void ProcessLinks(string linksText)
    {
        if (PreviewLinksContainer == null)
            return;

        PreviewLinksContainer.RemoveAllChildren();
        if (string.IsNullOrEmpty(linksText))
        {
            var emptyLabel = new Label
            {
                Text = Loc.GetString("detail-examinable-empty-links"),
                HorizontalExpand = true,
                HorizontalAlignment = HAlignment.Center,
                FontColorOverride = Color.Gray
            };
            PreviewLinksContainer.AddChild(emptyLabel);
            return;
        }

        var links = linksText.Split(new[] { ',', ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (var link in links)
        {
            if (IsValidUrl(link))
            {
                CreateLinkButton(link);
            }
            else
            {
                CreateLinkTextLabel(link);
            }
        }
    }

    private bool IsValidUrl(string url)
    {
        return url.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
            url.StartsWith("https://", StringComparison.OrdinalIgnoreCase) ||
            url.StartsWith("www.", StringComparison.OrdinalIgnoreCase);
    }

    private void CreateLinkButton(string url)
    {
        var button = new Button
        {
            Text = GetLinkDisplayText(url),
            ToolTip = Loc.GetString("humanoid-profile-editor-link-tooltip", ("url", url)),
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Center,
            StyleClasses = { StyleNano.ButtonOpenBoth }
        };

        button.OnPressed += _ => OpenLink(url);

        PreviewLinksContainer.AddChild(button);
    }

    private void CreateLinkTextLabel(string text)
    {
        var label = new Label
        {
            Text = text,
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Center,
            FontColorOverride = Color.Gray
        };

        PreviewLinksContainer.AddChild(label);
    }

    private string GetLinkDisplayText(string url)
    {
        if (url.Length > 40)
        {
            return url[..37] + "...";
        }
        return url;
    }

    private void OpenLink(string url)
    {
        if (url.StartsWith("www.", StringComparison.OrdinalIgnoreCase))
            url = "https://" + url;

        var uriOpener = IoCManager.Resolve<IUriOpener>();
        uriOpener.OpenUri(url);
    }

    private string GetStatusText(Status status)
    {
        return status switch
        {
            Status.No => Loc.GetString("humanoid-profile-editor-status-no-text"),
            Status.Semi => Loc.GetString("humanoid-profile-editor-status-semi-text"),
            Status.Full => Loc.GetString("humanoid-profile-editor-status-full-text"),
            Status.Absolute => Loc.GetString("humanoid-profile-editor-status-absolute-text"),
            _ => string.Empty
        };
    }

    private Color GetStatusColor(Status status)
    {
        return status switch
        {
            Status.No => Color.Red,
            Status.Semi => Color.Orange,
            Status.Full => Color.Blue,
            Status.Absolute => Color.Purple,
            _ => Color.Gray
        };
    }
}
